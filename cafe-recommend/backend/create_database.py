#!/usr/bin/env python3
"""
Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïä§ÌÅ¨Î¶ΩÌä∏
Alembic ÏóÜÏù¥ ÏßÅÏ†ë SQLAlchemyÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÌÖåÏù¥Î∏îÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§.
"""

import sqlite3
import os
from pathlib import Path

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº Í≤ΩÎ°ú
DB_PATH = Path(__file__).parent / "cafe_app.db"

def create_tables():
    """Î™®Îì† ÌïÑÏöîÌïú ÌÖåÏù¥Î∏îÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§."""
    
    conn = sqlite3.connect(str(DB_PATH))
    cursor = conn.cursor()
    
    try:
        # 1. Users ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email VARCHAR(255) UNIQUE NOT NULL,
            hashed_password VARCHAR(255) NOT NULL,
            is_active BOOLEAN DEFAULT 1,
            is_superuser BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 2. Menus ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS menus (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            category VARCHAR(100) NOT NULL,
            image_url VARCHAR(500),
            order_count INTEGER DEFAULT 0,
            avg_rating DECIMAL(3,2) DEFAULT 0.0,
            review_count INTEGER DEFAULT 0,
            is_available BOOLEAN DEFAULT 1,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            created_by INTEGER,
            updated_by INTEGER,
            FOREIGN KEY (created_by) REFERENCES users(id),
            FOREIGN KEY (updated_by) REFERENCES users(id)
        )
        """)
        
        # 3. Carts ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS carts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            session_id VARCHAR(255) UNIQUE NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 4. Cart Items ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS cart_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cart_id INTEGER NOT NULL,
            menu_id INTEGER NOT NULL,
            quantity INTEGER DEFAULT 1,
            special_requests TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (cart_id) REFERENCES carts(id) ON DELETE CASCADE,
            FOREIGN KEY (menu_id) REFERENCES menus(id)
        )
        """)
        
        # 5. Orders ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_number VARCHAR(255) UNIQUE,
            user_id INTEGER,
            session_id VARCHAR(255),
            total_amount DECIMAL(10,2) NOT NULL,
            status VARCHAR(50) DEFAULT 'pending',
            payment_method VARCHAR(50),
            payment_key VARCHAR(255),
            delivery_address TEXT,
            delivery_request TEXT,
            phone_number VARCHAR(20),
            items TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_refunded BOOLEAN DEFAULT 0,
            refund_amount DECIMAL(10,2),
            refund_reason TEXT,
            refund_id VARCHAR(255),
            refunded_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
        """)
        
        # 6. Order Items ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER NOT NULL,
            menu_id INTEGER NOT NULL,
            quantity INTEGER NOT NULL,
            unit_price DECIMAL(10,2) NOT NULL,
            total_price DECIMAL(10,2) NOT NULL,
            status VARCHAR(50) DEFAULT 'pending',
            menu_name VARCHAR(255),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
            FOREIGN KEY (menu_id) REFERENCES menus(id)
        )
        """)
        
        # 7. Reviews ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reviews (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            menu_id INTEGER NOT NULL,
            user_id INTEGER,
            rating DECIMAL(3,2) NOT NULL,
            content TEXT,
            photo_url VARCHAR(500),
            user_name VARCHAR(255),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (menu_id) REFERENCES menus(id),
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
        """)
        
        # 8. User Identity ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_identity (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id VARCHAR(255) UNIQUE NOT NULL,
            preferences TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 9. Chat History ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS chat_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            session_id VARCHAR(255) NOT NULL,
            message TEXT NOT NULL,
            response TEXT NOT NULL,
            message_type VARCHAR(50) DEFAULT 'general',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 10. Ingredients ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS ingredients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            unit VARCHAR(50) NOT NULL,
            min_stock_level DECIMAL(10,2) DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 11. Ingredient Stock ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS ingredient_stock (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ingredient_id INTEGER NOT NULL,
            current_quantity DECIMAL(10,2) DEFAULT 0,
            last_restock_date DATETIME,
            last_restock_quantity DECIMAL(10,2),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
        )
        """)
        
        # 12. Menu Ingredients ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS menu_ingredients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            menu_id INTEGER NOT NULL,
            ingredient_id INTEGER NOT NULL,
            quantity_required DECIMAL(10,2) NOT NULL,
            is_optional BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (menu_id) REFERENCES menus(id),
            FOREIGN KEY (ingredient_id) REFERENCES ingredients(id)
        )
        """)
        
        # 13. Payment Settings ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS payment_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            provider VARCHAR(50) NOT NULL UNIQUE,
            is_active BOOLEAN DEFAULT 0,
            client_id VARCHAR(255),
            client_secret VARCHAR(255),
            additional_settings TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # 14. Inventory Transactions ÌÖåÏù¥Î∏î
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS inventory_transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ingredient_id INTEGER NOT NULL,
            transaction_type VARCHAR(50) NOT NULL,
            quantity DECIMAL(10,2) NOT NULL,
            notes TEXT,
            created_by VARCHAR(255),
            order_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (ingredient_id) REFERENCES ingredients(id),
            FOREIGN KEY (order_id) REFERENCES orders(id)
        )
        """)
        
        # 15. Alembic Version ÌÖåÏù¥Î∏î (ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï∂îÏ†ÅÏö©)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS alembic_version (
            version_num VARCHAR(32) NOT NULL,
            CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
        )
        """)
        
        conn.commit()
        print("‚úÖ Î™®Îì† ÌÖåÏù¥Î∏îÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
        # ÌÖåÏù¥Î∏î Î™©Î°ù ÌôïÏù∏
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print(f"\nüìã ÏÉùÏÑ±Îêú ÌÖåÏù¥Î∏î Î™©Î°ù ({len(tables)}Í∞ú):")
        for table in tables:
            print(f"  - {table[0]}")
            
    except Exception as e:
        print(f"‚ùå ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def insert_sample_data():
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º ÏÇΩÏûÖÌï©ÎãàÎã§."""
    
    conn = sqlite3.connect(str(DB_PATH))
    cursor = conn.cursor()
    
    try:
        # ÏÉòÌîå Î©îÎâ¥ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
        sample_menus = [
            ("ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏", "ÏßÑÌïú ÏóêÏä§ÌîÑÎ†àÏÜåÏôÄ Îú®Í±∞Ïö¥ Î¨ºÎ°ú ÎßåÎì† ÌÅ¥ÎûòÏãù Ïª§Ìîº", 4500, "Ïª§Ìîº", None, 1, 1),
            ("Ïπ¥ÌéòÎùºÎñº", "Î∂ÄÎìúÎü¨Ïö¥ Ïö∞Ïú†ÏôÄ ÏóêÏä§ÌîÑÎ†àÏÜåÏùò ÏôÑÎ≤ΩÌïú Ï°∞Ìôî", 5000, "Ïª§Ìîº", None, 1, 1),
            ("Ïπ¥Ìë∏ÏπòÎÖ∏", "ÌíçÏÑ±Ìïú Ïö∞Ïú† Í±∞ÌíàÏù¥ Ïò¨ÎùºÍ∞Ñ Ïù¥ÌÉàÎ¶¨ÏïÑ Ï†ÑÌÜµ Ïª§Ìîº", 5000, "Ïª§Ìîº", None, 1, 1),
            ("Î∞îÎãêÎùºÎùºÎñº", "Îã¨ÏΩ§Ìïú Î∞îÎãêÎùº ÏãúÎüΩÏù¥ Îì§Ïñ¥Í∞Ñ ÎùºÎñº", 5500, "Ïª§Ìîº", None, 1, 1),
            ("Ïπ¥ÎùºÎ©ú ÎßàÌÇ§ÏïÑÌÜ†", "Îã¨ÏΩ§Ìïú Ïπ¥ÎùºÎ©úÍ≥º ÏóêÏä§ÌîÑÎ†àÏÜåÏùò ÎßåÎÇ®", 5800, "Ïª§Ìîº", None, 1, 1),
            ("ÏïÑÏù¥Ïä§ ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏", "ÏãúÏõêÌïú ÏñºÏùåÍ≥º Ìï®ÍªòÌïòÎäî ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏", 4500, "Ïª§Ìîº", None, 1, 1),
            ("Ï¥àÏΩúÎ¶ø ÏºÄÏù¥ÌÅ¨", "ÏßÑÌïú Ï¥àÏΩúÎ¶øÏùò Îã¨ÏΩ§Ìï®Ïù¥ Í∞ÄÎìùÌïú ÏºÄÏù¥ÌÅ¨", 6500, "ÎîîÏ†ÄÌä∏", None, 1, 1),
            ("ÏπòÏ¶àÏºÄÏù¥ÌÅ¨", "Î∂ÄÎìúÎüΩÍ≥† ÌÅ¨Î¶¨ÎØ∏Ìïú Îâ¥Ïöï Ïä§ÌÉÄÏùº ÏπòÏ¶àÏºÄÏù¥ÌÅ¨", 6000, "ÎîîÏ†ÄÌä∏", None, 1, 1),
            ("ÌÅ¨Î°úÏôÄÏÉÅ", "Î∞îÏÇ≠ÌïòÍ≥† Î≤ÑÌÑ∞Ìñ• Í∞ÄÎìùÌïú ÌîÑÎûëÏä§ Ï†ÑÌÜµ Îπµ", 3500, "Î≤†Ïù¥Ïª§Î¶¨", None, 1, 1),
            ("Î∏îÎ£®Î≤†Î¶¨ Î®∏ÌïÄ", "Ïã†ÏÑ†Ìïú Î∏îÎ£®Î≤†Î¶¨Í∞Ä Îì§Ïñ¥Í∞Ñ Ï¥âÏ¥âÌïú Î®∏ÌïÄ", 4000, "Î≤†Ïù¥Ïª§Î¶¨", None, 1, 1),
            ("Í∑∏Î¶∞Ìã∞ ÎùºÎñº", "ÏßÑÌïú ÎßêÏ∞®ÏôÄ Ïö∞Ïú†Ïùò Ï°∞Ìôî", 5200, "Ï∞®", None, 1, 1),
            ("ÏñºÍ∑∏Î†àÏù¥ Ìã∞", "Ìñ•Í∏ãÌïú Î≤†Î•¥Í∞ÄÎ™ª Ìñ•Ïùò ÏòÅÍµ≠ Ï†ÑÌÜµ Ï∞®", 4000, "Ï∞®", None, 1, 1)
        ]
        
        cursor.executemany("""
        INSERT OR IGNORE INTO menus 
        (name, description, price, category, image_url, is_available, is_active) 
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """, sample_menus)
        
        # Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ± (ÎπÑÎ∞ÄÎ≤àÌò∏Îäî Ìï¥ÏãúÌôîÎêòÏñ¥Ïïº ÌïòÏßÄÎßå Ïó¨Í∏∞ÏÑúÎäî Îã®ÏàúÌôî)
        cursor.execute("""
        INSERT OR IGNORE INTO users 
        (email, hashed_password, is_active, is_superuser) 
        VALUES (?, ?, ?, ?)
        """, ("admin@cafe.com", "hashed_admin123", 1, 1))
        
        conn.commit()
        print("‚úÖ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇΩÏûÖÎêòÏóàÏäµÎãàÎã§!")
        
        # Î©îÎâ¥ Í∞úÏàò ÌôïÏù∏
        cursor.execute("SELECT COUNT(*) FROM menus")
        menu_count = cursor.fetchone()[0]
        print(f"üìä Ï¥ù Î©îÎâ¥ Í∞úÏàò: {menu_count}Í∞ú")
        
    except Exception as e:
        print(f"‚ùå ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    print(f"üóÑÔ∏è  Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº: {DB_PATH}")
    print("üîß ÌÖåÏù¥Î∏î ÏÉùÏÑ±ÏùÑ ÏãúÏûëÌï©ÎãàÎã§...")
    
    create_tables()
    insert_sample_data()
    
    print("\nüéâ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
    print(f"üìÅ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº ÏúÑÏπò: {DB_PATH.absolute()}") 